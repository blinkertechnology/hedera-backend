import { lucia, prismaClient } from "@/lib/auth";
import { SAuthUser } from "@/schemas/auth";
import { PrismaClient } from "@prisma/client";
import { Router } from "express";
import { validateRequestBody } from "zod-express-middleware";
import bcryptjs from "bcryptjs";
import {
  PrismaClientInitializationError,
  PrismaClientKnownRequestError,
  PrismaClientRustPanicError,
  PrismaClientUnknownRequestError,
  PrismaClientValidationError,
} from "@prisma/client/runtime/library";

const prisma = new PrismaClient();

export const router: ExpressRouter = async () => {
  const router = Router();

  router.post("/", validateRequestBody(SAuthUser), (req, res) => {
    // try {
    const { email, password } = req.body;

    const salt = bcryptjs.genSaltSync(10);
    const passwordHash = bcryptjs.hashSync(password, salt);
    throw new Error("Some error");

    const user = await prisma.user.create({
      data: { email, password: passwordHash },
    });

    res.status(200).json({ ...user });

    // } catch (error) {
    //   if (
    //     error instanceof PrismaClientValidationError ||
    //     error instanceof PrismaClientInitializationError ||
    //     error instanceof PrismaClientRustPanicError ||
    //     error instanceof PrismaClientUnknownRequestError ||
    //     error instanceof PrismaClientKnownRequestError
    //   ) {
    //     const messages = error.message.split("\n");
    //     res
    //       .status(400)
    //       .json({ message: messages[messages.length - 1], name: error.name });
    //   } else
    //     res.status(500).json({
    //       message: "Something went wrong",
    //       name: "InternalServerError",
    //     });
    // }
  });

  return router;
};
